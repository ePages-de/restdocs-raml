

apply plugin: 'java-gradle-plugin'
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    mavenLocal()
    jcenter()
}

group = 'com.epages'

dependencies {
    compile gradleApi()
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.30")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.2.30")
    implementation("org.yaml:snakeyaml:1.20")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.9.0")


    testImplementation gradleTestKit()
    testImplementation("org.amshove.kluent:kluent:1.35")
    testImplementation("com.nhaarman:mockito-kotlin:1.5.0")
    testImplementation("com.jayway.jsonpath:json-path:2.3.0")
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId 'restdocs-raml-gradle-plugin'
            groupId = project.group

            artifact sourceJar {
                classifier 'sources'
            }
        }
    }
}

bintray {
    user = project.findProperty('bintrayUser')   ?: System.getenv('BINTRAY_USER')
    key  = project.findProperty('bintrayApiKey') ?: System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava','sourceJar']
    publish = true
    pkg {
        repo = "maven"
        name = 'restdocs-raml-gradle-plugin'
        userOrg = 'epages'
        websiteUrl = 'https://github.com/ePages-de/restdocs-raml'
        issueTrackerUrl = 'https://github.com/ePages-de/restdocs-raml/issues'
        vcsUrl = 'https://github.com/ePages-de/restdocs-raml.git'
        githubRepo = 'ePages-de/restdocs-raml'
        githubReleaseNotesFile = 'README.md'
        licenses = ['MIT']
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntime files(createClasspathManifest)
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.6'
}
